import numpy as np
import cv2 as cv2
import glob

resolution = (1280, 720)
 
# termination criteria
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)
 
# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
objp = np.zeros((6*7,3), np.float32)
objp[:,:2] = np.mgrid[0:7,0:6].T.reshape(-1,2)
 
# Arrays to store object points and image points from all the images.
objpoints = [] # 3d point in real world space
imgpoints = [] # 2d points in image plane.
 
images = glob.glob('./camera_calibration_images/*.jpg')
print(images)
 
for fname in images:
    img = cv2.imread(fname)
    img = cv2.resize(img, resolution, interpolation=cv2.INTER_LANCZOS4)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    '''for i in range(len(gray)):
      for j in range(len(gray[i])):
            if gray[i][j] > 150:
                gray[i][j] = 0
            else:
                gray[i][j] = 255'''
       
    
    # Find the chess board corners
    
    ret, corners = cv2.findChessboardCorners(gray, (8,5), None)
    print(ret, corners)
    cv2.imshow('img', gray)
    cv2.waitKey(0)
    # If found, add object points, image points (after refining them)
    if ret == True:
       objpoints.append(objp)
    
    corners2 = cv2.cornerSubPix(gray,corners, (11,11), (-1,-1), criteria)
    imgpoints.append(corners2)
    
    # Draw and display the corners
    cv2.drawChessboardCorners(img, (6,9), corners2, ret)
    cv2.imshow('img', img)
    cv2.waitKey(500)
 
cv2.destroyAllWindows()